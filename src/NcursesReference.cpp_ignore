#include <iostream>
#include <ncurses.h>
#include <cstdlib>

using namespace std;



int main(){
	
	int screen_size_x,
	    screen_size_y,
	    gamefield_x,
	    gamefield_y,
	    gamefield_size_x = 50,
	    gamefield_size_y = 40;
    initscr();
    cbreak();
    if (!has_colors()) {
    	endwin();
    	cout << "The terminal does not support colors" << endl;
    	exit(1);
    }
	WINDOW* my_win = newwin(gamefield_size_y + 2, gamefield_size_x + 2, 0, 0);
    start_color();
    init_pair(1, COLOR_BLACK, COLOR_RED);
	init_pair(2, COLOR_BLACK, COLOR_YELLOW);
	init_pair(3, COLOR_BLACK, COLOR_GREEN);
	init_pair(4, COLOR_BLACK, COLOR_CYAN);
	init_pair(5, COLOR_BLACK, COLOR_BLUE);
	init_pair(6, COLOR_BLACK, COLOR_MAGENTA);   
	while (true) {
		wclear(my_win);
    	getmaxyx(stdscr, screen_size_y, screen_size_x);
    	gamefield_y = (screen_size_y - gamefield_size_y) / 2 - 1;
    	gamefield_x = (screen_size_x - gamefield_size_x) / 2 - 1;
    	if (gamefield_x <= 0 || gamefield_y <= 0){
    		endwin();
    		cout << "Terminal window is too small" << endl;
    		exit(1);
    	}    		
    	mvwin(my_win, gamefield_y, gamefield_x);
		box(my_win, 0, 0);
		int current_color = 1;
		for (int i = 1; i <= gamefield_size_y; i++) {
			for (int j = 1; j <= gamefield_size_x; j++) {
				wattron(my_win, COLOR_PAIR(current_color));
				mvwaddch(my_win, i, j, ' ');
				wattroff(my_win, COLOR_PAIR(current_color));
				if (current_color == 6) {
					current_color = 1;
				} else {
					current_color++;
				}
			}
		}
    	refresh();
    	wrefresh(my_win);
    	move(0, 0);
    	getch();
    }
    endwin();
    return 0;
}
